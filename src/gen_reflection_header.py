'''
    Boost Software License - Version 1.0 - August 17, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
'''

#N = 20
#print('// Generated by generate_reflection_header.py using N=' + str(N))

def generate_REFL_BEGIN(virtual, extends):
    nameSuffix = ''
    nameSuffix += '_VIRTUAL' if virtual else ''
    nameSuffix += '_EXTENDS' if extends else ''
    name = 'REFL_BEGIN' + nameSuffix

    virtualPrefix = ' virtual' if virtual else ''

    args = 'className_, version_'
    if extends:
        args += ', baseClass_'

    s = '#define %s(%s) \\\n' % (name, args)

    s += 'public:\\\n'

    # classId: static versioned class name
    s += '    static const char* reflection_s_classId(REFL_MATCH_0) { return className_ "," #version_; }\\\n'

    # s_className: static class name (used when we have the type, but not the instance)
    s += '    static const char* reflection_s_className(REFL_MATCH_0) { return className_; }\\\n'

    # s_isPolymorphic: is a polymorphic type?
    s += '    static bool reflection_s_isPolymorphic(REFL_MATCH_0) { return ' + ('true' if virtual else 'false') + '; }\\\n'

    # classId: get versioned class name - resolved at runtime
    s += '   %s const char* reflection_classId(REFL_MATCH_0) const { return className_ "," #version_; }\\\n' % virtualPrefix

    # className: get displayable class name - resolved at runtime
    s += '   %s const char* reflection_className(REFL_MATCH_0) const { return className_; }\\\n' % virtualPrefix

    # isPolymorphic: is a polymorphic type?
    #s += '   %s static bool reflection_isPolymorphic() { return ' + ('true' if virtual else 'false') + '; }\\\n' % virtualPrefix

    # uuidOrNull (priority 1): get this class's UUID or nullptr if not specified
    s += '   %s const ::reflection::UUID_t* reflection_uuidOrNull(REFL_MATCH_1) const { return nullptr; }\\\n' % virtualPrefix

    # getFields: get all reflectable fields in this class
    s += '   %s ::reflection::FieldSet_t const* reflection_getFields(REFL_MATCH_0) const {\\\n' % virtualPrefix
    s += '        typedef std::remove_reference<decltype(*this)>::type ThisClass;\\\n'
    s += '        return reflection_s_getFields<ThisClass>(REFL_MATCH);\\\n'
    s += '   }\\\n'

    # s_getFields: get all reflectable fields in this class
    s += '    template <class ThisClass>\\\n'
    s += '    static ::reflection::FieldSet_t const* reflection_s_getFields(REFL_MATCH_0) {\\\n'
    s += '        const char* thisClassName = className_;\\\n'
    s += '        thisClassName = thisClassName;\\\n'   # warnings about variable being unused

    if not extends:
        s += '        ::reflection::FieldSet_t const* baseClassFields = nullptr;\\\n'
        s += '        void* (*derivedPtrToBasePtr)(void*) = nullptr;\\\n'
    else:
        s += '        ::reflection::FieldSet_t const* baseClassFields = baseClass_::reflection_s_getFields<baseClass_>(REFL_MATCH);\\\n'
        s += '        void* (*derivedPtrToBasePtr)(void*) = &::reflection::derivedPtrToBasePtr<ThisClass, baseClass_>;\\\n'

    s += '        static ::reflection::Field_t const fields[] = {\\\n'
    s += '\n'
    '''
    simpleName = 'REFL_SIMPLE' + nameSuffix

    s += '#define %s(%s, ...) %s(%s)\\\n' % (simpleName, args, name, args)
    s += '    REFL_FIELDS(__VA_ARGS__)\\\n'
    s += '    REFL_END\\\n'
    s += '\n'
    '''
    print(s)

def generate_variadics():
    print('#define REFL_VA_NARGS_IMPL(', end='')

    for i in range(N + 1):
        if i > 0:
            print(', ', end='')
        print('_' + str(i), end='')

    print(', N, ...) N')

    print('#define REFL_VA_NARGS(...) REFL_VA_NARGS_IMPL(X,##__VA_ARGS__', end='')

    for i in range(N + 1):
        print(', ' + str(N - i), end='')

    print(')')

    print('''#define REFL_VARARG_IMPL2(base, count, ...) base##count(__VA_ARGS__)
    #define REFL_VARARG_IMPL(base, count, ...) REFL_VARARG_IMPL2(base, count, __VA_ARGS__)
    #define REFL_VARARG(base, ...) REFL_VARARG_IMPL(base, REFL_VA_NARGS(__VA_ARGS__), __VA_ARGS__)
    ''')

    for i in range(N + 1):
        s = '#define REFL_FIELDS_' + str(i) + '('

        for j in range(i):
            ns = '_' + str(j)
            if j + 1 < i:
                ns += ', '
            s += ns

        s += ') '

        for j in range(i):
            if j % 4 == 0:
                s += '\\\n    '

            ns = 'REFL_FIELD(_' + str(j) + ')'

            s += ns

        print(s)

    print('#define REFL_FIELDS(...) REFL_VARARG(REFL_FIELDS_, __VA_ARGS__)')

print('#pragma once')
print()
print('// Generated by gen_reflection_header.py')
print()

print('namespace reflection {')

for virtual in [False, True]:
    for extends in [False, True]:
        generate_REFL_BEGIN(virtual, extends)

#generate_variadics()

print('}')
