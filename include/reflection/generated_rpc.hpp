#pragma once

// Generated by gen_rpc_header.py

#include "function.hpp"

namespace rpc {

template <class Handler, const char* functionName, typename Return>
Return rpcCall(
        Handler& handler) {

    assert(handler.begin(functionName));

    assert(handler.invoke());

    Return result;
    assert(handler.end(result));
    return result;
}

template <const char* functionName, typename Return>
Return rpcSerializedCall(
        ) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, true, writer, reader));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <class Handler, typename Return, Return (*function)()>
bool rpcExecute(Handler& handler) {
    assert(handler.begin());

    const Return result = function();

    if (!handler.end(result)) return false;

    return true;
}

template <typename Return, Return (*function)()>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    const Return result = function();

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <class Handler, typename Return>
struct MakeFunctionPointer2_0 {
    typedef Return (*type)(Handler&);
};

template <class Handler, const char* functionName, typename Return>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer2_0<Handler, Return>::type getRpcCall(Return (*functionNull)()) {
    return &rpcCall<Handler, functionName, Return>;
}

template <typename Return>
struct MakeFunctionPointer0 {
    typedef Return (*type)();
};

template <const char* functionName, typename Return>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer0<Return>::type getRpcSerializedCall(Return (*functionNull)()) {
    return &rpcSerializedCall<functionName, Return>;
}

template <typename Function, Function func, class Handler, typename Return>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(Return (*functionNull)()))(
        Handler& handler) {
    return &rpcExecute<Handler, Return, func>;
}

template <typename Function, Function func, typename Return>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(Return (*functionNull)()))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Return, func>;
}

template <class Handler, const char* functionName>
void rpcCallVoid(
        Handler& handler) {

    assert(handler.begin(functionName));

    assert(handler.invoke());

    assert(handler.end());
}

template <const char* functionName>
void rpcSerializedCallVoid(
        ) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, false, writer, reader));

    assert(invokeRPC());

    endRPC();
}

template <class Handler, void (*function)()>
bool rpcExecute(Handler& handler) {
    assert(handler.begin());

    function();

    if (!handler.end()) return false;

    return true;
}

template <void (*function)()>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    function();

    return true;
}

template <class Handler>
struct MakeFunctionPointerVoid2_0 {
    typedef void (*type)(Handler&);
};

template <class Handler, const char* functionName>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid2_0<Handler>::type getRpcCall(void (*functionNull)()) {
    return &rpcCallVoid<Handler, functionName>;
}

struct MakeFunctionPointerVoid0 {
    typedef void (*type)();
};

template <const char* functionName>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid0::type getRpcSerializedCall(void (*functionNull)()) {
    return &rpcSerializedCallVoid<functionName>;
}

template <typename Function, Function func, class Handler>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(void (*functionNull)()))(
        Handler& handler) {
    return &rpcExecute<Handler, func>;
}

template <typename Function, Function func>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(void (*functionNull)()))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<func>;
}

template <class Handler, const char* functionName, typename Return, typename Arg0>
Return rpcCall(
        Handler& handler, Arg0 const& arg0) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));

    assert(handler.invoke());

    Return result;
    assert(handler.end(result));
    return result;
}

template <const char* functionName, typename Return, typename Arg0>
Return rpcSerializedCall(
        Arg0 const& arg0) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, true, writer, reader));

    assert(reflectSerialize(arg0, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <class Handler, typename Return, typename Arg0, Return (*function)(Arg0)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;

    const Return result = function(arg0);

    if (!handler.end(result)) return false;

    return true;
}

template <typename Return, typename Arg0, Return (*function)(Arg0)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;

    if (!reflectDeserialize(arg0, reader)) return false;

    const Return result = function(arg0);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <class Handler, typename Return, typename Arg0>
struct MakeFunctionPointer2_1 {
    typedef Return (*type)(Handler&, Arg0 const&);
};

template <class Handler, const char* functionName, typename Return, typename Arg0>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer2_1<Handler, Return, Arg0>::type getRpcCall(Return (*functionNull)(Arg0)) {
    return &rpcCall<Handler, functionName, Return, Arg0>;
}

template <typename Return, typename Arg0>
struct MakeFunctionPointer1 {
    typedef Return (*type)(Arg0 const&);
};

template <const char* functionName, typename Return, typename Arg0>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer1<Return, Arg0>::type getRpcSerializedCall(Return (*functionNull)(Arg0)) {
    return &rpcSerializedCall<functionName, Return, Arg0>;
}

template <typename Function, Function func, class Handler, typename Return, typename Arg0>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(Return (*functionNull)(Arg0)))(
        Handler& handler) {
    return &rpcExecute<Handler, Return, Arg0, func>;
}

template <typename Function, Function func, typename Return, typename Arg0>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(Return (*functionNull)(Arg0)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Return, Arg0, func>;
}

template <class Handler, const char* functionName, typename Arg0>
void rpcCallVoid(
        Handler& handler, Arg0 const& arg0) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));

    assert(handler.invoke());

    assert(handler.end());
}

template <const char* functionName, typename Arg0>
void rpcSerializedCallVoid(
        Arg0 const& arg0) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, false, writer, reader));

    assert(reflectSerialize(arg0, writer));

    assert(invokeRPC());

    endRPC();
}

template <class Handler, typename Arg0, void (*function)(Arg0)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;

    function(arg0);

    if (!handler.end()) return false;

    return true;
}

template <typename Arg0, void (*function)(Arg0)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;

    if (!reflectDeserialize(arg0, reader)) return false;

    function(arg0);

    return true;
}

template <class Handler, typename Arg0>
struct MakeFunctionPointerVoid2_1 {
    typedef void (*type)(Handler&, Arg0 const&);
};

template <class Handler, const char* functionName, typename Arg0>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid2_1<Handler, Arg0>::type getRpcCall(void (*functionNull)(Arg0)) {
    return &rpcCallVoid<Handler, functionName, Arg0>;
}

template <typename Arg0>
struct MakeFunctionPointerVoid1 {
    typedef void (*type)(Arg0 const&);
};

template <const char* functionName, typename Arg0>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid1<Arg0>::type getRpcSerializedCall(void (*functionNull)(Arg0)) {
    return &rpcSerializedCallVoid<functionName, Arg0>;
}

template <typename Function, Function func, class Handler, typename Arg0>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(void (*functionNull)(Arg0)))(
        Handler& handler) {
    return &rpcExecute<Handler, Arg0, func>;
}

template <typename Function, Function func, typename Arg0>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(void (*functionNull)(Arg0)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Arg0, func>;
}

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1>
Return rpcCall(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));

    assert(handler.invoke());

    Return result;
    assert(handler.end(result));
    return result;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, true, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, Return (*function)(Arg0, Arg1)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;

    const Return result = function(arg0, arg1);

    if (!handler.end(result)) return false;

    return true;
}

template <typename Return, typename Arg0, typename Arg1, Return (*function)(Arg0, Arg1)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;

    const Return result = function(arg0, arg1);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <class Handler, typename Return, typename Arg0, typename Arg1>
struct MakeFunctionPointer2_2 {
    typedef Return (*type)(Handler&, Arg0 const&, Arg1 const&);
};

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer2_2<Handler, Return, Arg0, Arg1>::type getRpcCall(Return (*functionNull)(Arg0, Arg1)) {
    return &rpcCall<Handler, functionName, Return, Arg0, Arg1>;
}

template <typename Return, typename Arg0, typename Arg1>
struct MakeFunctionPointer2 {
    typedef Return (*type)(Arg0 const&, Arg1 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer2<Return, Arg0, Arg1>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1>;
}

template <typename Function, Function func, class Handler, typename Return, typename Arg0, typename Arg1>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(Return (*functionNull)(Arg0, Arg1)))(
        Handler& handler) {
    return &rpcExecute<Handler, Return, Arg0, Arg1, func>;
}

template <typename Function, Function func, typename Return, typename Arg0, typename Arg1>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(Return (*functionNull)(Arg0, Arg1)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Return, Arg0, Arg1, func>;
}

template <class Handler, const char* functionName, typename Arg0, typename Arg1>
void rpcCallVoid(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));

    assert(handler.invoke());

    assert(handler.end());
}

template <const char* functionName, typename Arg0, typename Arg1>
void rpcSerializedCallVoid(
        Arg0 const& arg0, Arg1 const& arg1) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, false, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));

    assert(invokeRPC());

    endRPC();
}

template <class Handler, typename Arg0, typename Arg1, void (*function)(Arg0, Arg1)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;

    function(arg0, arg1);

    if (!handler.end()) return false;

    return true;
}

template <typename Arg0, typename Arg1, void (*function)(Arg0, Arg1)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;

    function(arg0, arg1);

    return true;
}

template <class Handler, typename Arg0, typename Arg1>
struct MakeFunctionPointerVoid2_2 {
    typedef void (*type)(Handler&, Arg0 const&, Arg1 const&);
};

template <class Handler, const char* functionName, typename Arg0, typename Arg1>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid2_2<Handler, Arg0, Arg1>::type getRpcCall(void (*functionNull)(Arg0, Arg1)) {
    return &rpcCallVoid<Handler, functionName, Arg0, Arg1>;
}

template <typename Arg0, typename Arg1>
struct MakeFunctionPointerVoid2 {
    typedef void (*type)(Arg0 const&, Arg1 const&);
};

template <const char* functionName, typename Arg0, typename Arg1>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid2<Arg0, Arg1>::type getRpcSerializedCall(void (*functionNull)(Arg0, Arg1)) {
    return &rpcSerializedCallVoid<functionName, Arg0, Arg1>;
}

template <typename Function, Function func, class Handler, typename Arg0, typename Arg1>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(void (*functionNull)(Arg0, Arg1)))(
        Handler& handler) {
    return &rpcExecute<Handler, Arg0, Arg1, func>;
}

template <typename Function, Function func, typename Arg0, typename Arg1>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(void (*functionNull)(Arg0, Arg1)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Arg0, Arg1, func>;
}

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2>
Return rpcCall(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));

    assert(handler.invoke());

    Return result;
    assert(handler.end(result));
    return result;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, true, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, Return (*function)(Arg0, Arg1, Arg2)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;

    const Return result = function(arg0, arg1, arg2);

    if (!handler.end(result)) return false;

    return true;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, Return (*function)(Arg0, Arg1, Arg2)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;

    const Return result = function(arg0, arg1, arg2);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2>
struct MakeFunctionPointer2_3 {
    typedef Return (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&);
};

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer2_3<Handler, Return, Arg0, Arg1, Arg2>::type getRpcCall(Return (*functionNull)(Arg0, Arg1, Arg2)) {
    return &rpcCall<Handler, functionName, Return, Arg0, Arg1, Arg2>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2>
struct MakeFunctionPointer3 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer3<Return, Arg0, Arg1, Arg2>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2>;
}

template <typename Function, Function func, class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(Return (*functionNull)(Arg0, Arg1, Arg2)))(
        Handler& handler) {
    return &rpcExecute<Handler, Return, Arg0, Arg1, Arg2, func>;
}

template <typename Function, Function func, typename Return, typename Arg0, typename Arg1, typename Arg2>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(Return (*functionNull)(Arg0, Arg1, Arg2)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Return, Arg0, Arg1, Arg2, func>;
}

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2>
void rpcCallVoid(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));

    assert(handler.invoke());

    assert(handler.end());
}

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2>
void rpcSerializedCallVoid(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, false, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));

    assert(invokeRPC());

    endRPC();
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, void (*function)(Arg0, Arg1, Arg2)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;

    function(arg0, arg1, arg2);

    if (!handler.end()) return false;

    return true;
}

template <typename Arg0, typename Arg1, typename Arg2, void (*function)(Arg0, Arg1, Arg2)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;

    function(arg0, arg1, arg2);

    return true;
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2>
struct MakeFunctionPointerVoid2_3 {
    typedef void (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&);
};

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid2_3<Handler, Arg0, Arg1, Arg2>::type getRpcCall(void (*functionNull)(Arg0, Arg1, Arg2)) {
    return &rpcCallVoid<Handler, functionName, Arg0, Arg1, Arg2>;
}

template <typename Arg0, typename Arg1, typename Arg2>
struct MakeFunctionPointerVoid3 {
    typedef void (*type)(Arg0 const&, Arg1 const&, Arg2 const&);
};

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid3<Arg0, Arg1, Arg2>::type getRpcSerializedCall(void (*functionNull)(Arg0, Arg1, Arg2)) {
    return &rpcSerializedCallVoid<functionName, Arg0, Arg1, Arg2>;
}

template <typename Function, Function func, class Handler, typename Arg0, typename Arg1, typename Arg2>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(void (*functionNull)(Arg0, Arg1, Arg2)))(
        Handler& handler) {
    return &rpcExecute<Handler, Arg0, Arg1, Arg2, func>;
}

template <typename Function, Function func, typename Arg0, typename Arg1, typename Arg2>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(void (*functionNull)(Arg0, Arg1, Arg2)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Arg0, Arg1, Arg2, func>;
}

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
Return rpcCall(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));
    assert(handler.argument(arg3));

    assert(handler.invoke());

    Return result;
    assert(handler.end(result));
    return result;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, true, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, Return (*function)(Arg0, Arg1, Arg2, Arg3)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;
    if (!handler.getArgument(arg3)) return false;

    const Return result = function(arg0, arg1, arg2, arg3);

    if (!handler.end(result)) return false;

    return true;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, Return (*function)(Arg0, Arg1, Arg2, Arg3)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;

    const Return result = function(arg0, arg1, arg2, arg3);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
struct MakeFunctionPointer2_4 {
    typedef Return (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&);
};

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer2_4<Handler, Return, Arg0, Arg1, Arg2, Arg3>::type getRpcCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3)) {
    return &rpcCall<Handler, functionName, Return, Arg0, Arg1, Arg2, Arg3>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
struct MakeFunctionPointer4 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer4<Return, Arg0, Arg1, Arg2, Arg3>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2, Arg3>;
}

template <typename Function, Function func, class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3)))(
        Handler& handler) {
    return &rpcExecute<Handler, Return, Arg0, Arg1, Arg2, Arg3, func>;
}

template <typename Function, Function func, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Return, Arg0, Arg1, Arg2, Arg3, func>;
}

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
void rpcCallVoid(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));
    assert(handler.argument(arg3));

    assert(handler.invoke());

    assert(handler.end());
}

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
void rpcSerializedCallVoid(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, false, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));

    assert(invokeRPC());

    endRPC();
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, void (*function)(Arg0, Arg1, Arg2, Arg3)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;
    if (!handler.getArgument(arg3)) return false;

    function(arg0, arg1, arg2, arg3);

    if (!handler.end()) return false;

    return true;
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, void (*function)(Arg0, Arg1, Arg2, Arg3)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;

    function(arg0, arg1, arg2, arg3);

    return true;
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
struct MakeFunctionPointerVoid2_4 {
    typedef void (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&);
};

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid2_4<Handler, Arg0, Arg1, Arg2, Arg3>::type getRpcCall(void (*functionNull)(Arg0, Arg1, Arg2, Arg3)) {
    return &rpcCallVoid<Handler, functionName, Arg0, Arg1, Arg2, Arg3>;
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3>
struct MakeFunctionPointerVoid4 {
    typedef void (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&);
};

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid4<Arg0, Arg1, Arg2, Arg3>::type getRpcSerializedCall(void (*functionNull)(Arg0, Arg1, Arg2, Arg3)) {
    return &rpcSerializedCallVoid<functionName, Arg0, Arg1, Arg2, Arg3>;
}

template <typename Function, Function func, class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(void (*functionNull)(Arg0, Arg1, Arg2, Arg3)))(
        Handler& handler) {
    return &rpcExecute<Handler, Arg0, Arg1, Arg2, Arg3, func>;
}

template <typename Function, Function func, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(void (*functionNull)(Arg0, Arg1, Arg2, Arg3)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Arg0, Arg1, Arg2, Arg3, func>;
}

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
Return rpcCall(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));
    assert(handler.argument(arg3));
    assert(handler.argument(arg4));

    assert(handler.invoke());

    Return result;
    assert(handler.end(result));
    return result;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, true, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;
    if (!handler.getArgument(arg3)) return false;
    if (!handler.getArgument(arg4)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4);

    if (!handler.end(result)) return false;

    return true;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
struct MakeFunctionPointer2_5 {
    typedef Return (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&);
};

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer2_5<Handler, Return, Arg0, Arg1, Arg2, Arg3, Arg4>::type getRpcCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4)) {
    return &rpcCall<Handler, functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
struct MakeFunctionPointer5 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer5<Return, Arg0, Arg1, Arg2, Arg3, Arg4>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4>;
}

template <typename Function, Function func, class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4)))(
        Handler& handler) {
    return &rpcExecute<Handler, Return, Arg0, Arg1, Arg2, Arg3, Arg4, func>;
}

template <typename Function, Function func, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Return, Arg0, Arg1, Arg2, Arg3, Arg4, func>;
}

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
void rpcCallVoid(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));
    assert(handler.argument(arg3));
    assert(handler.argument(arg4));

    assert(handler.invoke());

    assert(handler.end());
}

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
void rpcSerializedCallVoid(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, false, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));

    assert(invokeRPC());

    endRPC();
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, void (*function)(Arg0, Arg1, Arg2, Arg3, Arg4)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;
    if (!handler.getArgument(arg3)) return false;
    if (!handler.getArgument(arg4)) return false;

    function(arg0, arg1, arg2, arg3, arg4);

    if (!handler.end()) return false;

    return true;
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, void (*function)(Arg0, Arg1, Arg2, Arg3, Arg4)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;

    function(arg0, arg1, arg2, arg3, arg4);

    return true;
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
struct MakeFunctionPointerVoid2_5 {
    typedef void (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&);
};

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid2_5<Handler, Arg0, Arg1, Arg2, Arg3, Arg4>::type getRpcCall(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4)) {
    return &rpcCallVoid<Handler, functionName, Arg0, Arg1, Arg2, Arg3, Arg4>;
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
struct MakeFunctionPointerVoid5 {
    typedef void (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&);
};

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid5<Arg0, Arg1, Arg2, Arg3, Arg4>::type getRpcSerializedCall(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4)) {
    return &rpcSerializedCallVoid<functionName, Arg0, Arg1, Arg2, Arg3, Arg4>;
}

template <typename Function, Function func, class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4)))(
        Handler& handler) {
    return &rpcExecute<Handler, Arg0, Arg1, Arg2, Arg3, Arg4, func>;
}

template <typename Function, Function func, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Arg0, Arg1, Arg2, Arg3, Arg4, func>;
}

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
Return rpcCall(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));
    assert(handler.argument(arg3));
    assert(handler.argument(arg4));
    assert(handler.argument(arg5));

    assert(handler.invoke());

    Return result;
    assert(handler.end(result));
    return result;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, true, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;
    if (!handler.getArgument(arg3)) return false;
    if (!handler.getArgument(arg4)) return false;
    if (!handler.getArgument(arg5)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5);

    if (!handler.end(result)) return false;

    return true;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
struct MakeFunctionPointer2_6 {
    typedef Return (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&);
};

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer2_6<Handler, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>::type getRpcCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)) {
    return &rpcCall<Handler, functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
struct MakeFunctionPointer6 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer6<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>;
}

template <typename Function, Function func, class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)))(
        Handler& handler) {
    return &rpcExecute<Handler, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, func>;
}

template <typename Function, Function func, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, func>;
}

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
void rpcCallVoid(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));
    assert(handler.argument(arg3));
    assert(handler.argument(arg4));
    assert(handler.argument(arg5));

    assert(handler.invoke());

    assert(handler.end());
}

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
void rpcSerializedCallVoid(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, false, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));

    assert(invokeRPC());

    endRPC();
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, void (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;
    if (!handler.getArgument(arg3)) return false;
    if (!handler.getArgument(arg4)) return false;
    if (!handler.getArgument(arg5)) return false;

    function(arg0, arg1, arg2, arg3, arg4, arg5);

    if (!handler.end()) return false;

    return true;
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, void (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;

    function(arg0, arg1, arg2, arg3, arg4, arg5);

    return true;
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
struct MakeFunctionPointerVoid2_6 {
    typedef void (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&);
};

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid2_6<Handler, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>::type getRpcCall(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)) {
    return &rpcCallVoid<Handler, functionName, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>;
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
struct MakeFunctionPointerVoid6 {
    typedef void (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&);
};

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid6<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>::type getRpcSerializedCall(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)) {
    return &rpcSerializedCallVoid<functionName, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>;
}

template <typename Function, Function func, class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)))(
        Handler& handler) {
    return &rpcExecute<Handler, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, func>;
}

template <typename Function, Function func, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, func>;
}

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
Return rpcCall(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));
    assert(handler.argument(arg3));
    assert(handler.argument(arg4));
    assert(handler.argument(arg5));
    assert(handler.argument(arg6));

    assert(handler.invoke());

    Return result;
    assert(handler.end(result));
    return result;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, true, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));
    assert(reflectSerialize(arg6, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;
    if (!handler.getArgument(arg3)) return false;
    if (!handler.getArgument(arg4)) return false;
    if (!handler.getArgument(arg5)) return false;
    if (!handler.getArgument(arg6)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6);

    if (!handler.end(result)) return false;

    return true;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;
    if (!reflectDeserialize(arg6, reader)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
struct MakeFunctionPointer2_7 {
    typedef Return (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&);
};

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer2_7<Handler, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>::type getRpcCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)) {
    return &rpcCall<Handler, functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
struct MakeFunctionPointer7 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer7<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>;
}

template <typename Function, Function func, class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)))(
        Handler& handler) {
    return &rpcExecute<Handler, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, func>;
}

template <typename Function, Function func, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, func>;
}

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
void rpcCallVoid(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));
    assert(handler.argument(arg3));
    assert(handler.argument(arg4));
    assert(handler.argument(arg5));
    assert(handler.argument(arg6));

    assert(handler.invoke());

    assert(handler.end());
}

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
void rpcSerializedCallVoid(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, false, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));
    assert(reflectSerialize(arg6, writer));

    assert(invokeRPC());

    endRPC();
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, void (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;
    if (!handler.getArgument(arg3)) return false;
    if (!handler.getArgument(arg4)) return false;
    if (!handler.getArgument(arg5)) return false;
    if (!handler.getArgument(arg6)) return false;

    function(arg0, arg1, arg2, arg3, arg4, arg5, arg6);

    if (!handler.end()) return false;

    return true;
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, void (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;
    if (!reflectDeserialize(arg6, reader)) return false;

    function(arg0, arg1, arg2, arg3, arg4, arg5, arg6);

    return true;
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
struct MakeFunctionPointerVoid2_7 {
    typedef void (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&);
};

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid2_7<Handler, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>::type getRpcCall(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)) {
    return &rpcCallVoid<Handler, functionName, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>;
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
struct MakeFunctionPointerVoid7 {
    typedef void (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&);
};

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid7<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>::type getRpcSerializedCall(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)) {
    return &rpcSerializedCallVoid<functionName, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>;
}

template <typename Function, Function func, class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)))(
        Handler& handler) {
    return &rpcExecute<Handler, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, func>;
}

template <typename Function, Function func, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, func>;
}

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
Return rpcCall(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));
    assert(handler.argument(arg3));
    assert(handler.argument(arg4));
    assert(handler.argument(arg5));
    assert(handler.argument(arg6));
    assert(handler.argument(arg7));

    assert(handler.invoke());

    Return result;
    assert(handler.end(result));
    return result;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, true, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));
    assert(reflectSerialize(arg6, writer));
    assert(reflectSerialize(arg7, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;
    if (!handler.getArgument(arg3)) return false;
    if (!handler.getArgument(arg4)) return false;
    if (!handler.getArgument(arg5)) return false;
    if (!handler.getArgument(arg6)) return false;
    if (!handler.getArgument(arg7)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    if (!handler.end(result)) return false;

    return true;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;
    if (!reflectDeserialize(arg6, reader)) return false;
    if (!reflectDeserialize(arg7, reader)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
struct MakeFunctionPointer2_8 {
    typedef Return (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&);
};

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer2_8<Handler, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>::type getRpcCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)) {
    return &rpcCall<Handler, functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
struct MakeFunctionPointer8 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer8<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>;
}

template <typename Function, Function func, class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)))(
        Handler& handler) {
    return &rpcExecute<Handler, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, func>;
}

template <typename Function, Function func, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, func>;
}

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
void rpcCallVoid(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));
    assert(handler.argument(arg3));
    assert(handler.argument(arg4));
    assert(handler.argument(arg5));
    assert(handler.argument(arg6));
    assert(handler.argument(arg7));

    assert(handler.invoke());

    assert(handler.end());
}

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
void rpcSerializedCallVoid(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, false, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));
    assert(reflectSerialize(arg6, writer));
    assert(reflectSerialize(arg7, writer));

    assert(invokeRPC());

    endRPC();
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, void (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;
    if (!handler.getArgument(arg3)) return false;
    if (!handler.getArgument(arg4)) return false;
    if (!handler.getArgument(arg5)) return false;
    if (!handler.getArgument(arg6)) return false;
    if (!handler.getArgument(arg7)) return false;

    function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    if (!handler.end()) return false;

    return true;
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, void (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;
    if (!reflectDeserialize(arg6, reader)) return false;
    if (!reflectDeserialize(arg7, reader)) return false;

    function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    return true;
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
struct MakeFunctionPointerVoid2_8 {
    typedef void (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&);
};

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid2_8<Handler, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>::type getRpcCall(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)) {
    return &rpcCallVoid<Handler, functionName, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>;
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
struct MakeFunctionPointerVoid8 {
    typedef void (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&);
};

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid8<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>::type getRpcSerializedCall(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)) {
    return &rpcSerializedCallVoid<functionName, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>;
}

template <typename Function, Function func, class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)))(
        Handler& handler) {
    return &rpcExecute<Handler, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, func>;
}

template <typename Function, Function func, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, func>;
}

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
Return rpcCall(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7, Arg8 const& arg8) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));
    assert(handler.argument(arg3));
    assert(handler.argument(arg4));
    assert(handler.argument(arg5));
    assert(handler.argument(arg6));
    assert(handler.argument(arg7));
    assert(handler.argument(arg8));

    assert(handler.invoke());

    Return result;
    assert(handler.end(result));
    return result;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7, Arg8 const& arg8) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, true, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));
    assert(reflectSerialize(arg6, writer));
    assert(reflectSerialize(arg7, writer));
    assert(reflectSerialize(arg8, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;
    typename std::remove_cv<typename std::remove_reference<Arg8>::type>::type arg8;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;
    if (!handler.getArgument(arg3)) return false;
    if (!handler.getArgument(arg4)) return false;
    if (!handler.getArgument(arg5)) return false;
    if (!handler.getArgument(arg6)) return false;
    if (!handler.getArgument(arg7)) return false;
    if (!handler.getArgument(arg8)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

    if (!handler.end(result)) return false;

    return true;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;
    typename std::remove_cv<typename std::remove_reference<Arg8>::type>::type arg8;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;
    if (!reflectDeserialize(arg6, reader)) return false;
    if (!reflectDeserialize(arg7, reader)) return false;
    if (!reflectDeserialize(arg8, reader)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
struct MakeFunctionPointer2_9 {
    typedef Return (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&, Arg8 const&);
};

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer2_9<Handler, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8>::type getRpcCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)) {
    return &rpcCall<Handler, functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
struct MakeFunctionPointer9 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&, Arg8 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer9<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8>;
}

template <typename Function, Function func, class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)))(
        Handler& handler) {
    return &rpcExecute<Handler, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, func>;
}

template <typename Function, Function func, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, func>;
}

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
void rpcCallVoid(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7, Arg8 const& arg8) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));
    assert(handler.argument(arg3));
    assert(handler.argument(arg4));
    assert(handler.argument(arg5));
    assert(handler.argument(arg6));
    assert(handler.argument(arg7));
    assert(handler.argument(arg8));

    assert(handler.invoke());

    assert(handler.end());
}

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
void rpcSerializedCallVoid(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7, Arg8 const& arg8) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, false, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));
    assert(reflectSerialize(arg6, writer));
    assert(reflectSerialize(arg7, writer));
    assert(reflectSerialize(arg8, writer));

    assert(invokeRPC());

    endRPC();
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, void (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;
    typename std::remove_cv<typename std::remove_reference<Arg8>::type>::type arg8;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;
    if (!handler.getArgument(arg3)) return false;
    if (!handler.getArgument(arg4)) return false;
    if (!handler.getArgument(arg5)) return false;
    if (!handler.getArgument(arg6)) return false;
    if (!handler.getArgument(arg7)) return false;
    if (!handler.getArgument(arg8)) return false;

    function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

    if (!handler.end()) return false;

    return true;
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, void (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;
    typename std::remove_cv<typename std::remove_reference<Arg8>::type>::type arg8;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;
    if (!reflectDeserialize(arg6, reader)) return false;
    if (!reflectDeserialize(arg7, reader)) return false;
    if (!reflectDeserialize(arg8, reader)) return false;

    function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

    return true;
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
struct MakeFunctionPointerVoid2_9 {
    typedef void (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&, Arg8 const&);
};

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid2_9<Handler, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8>::type getRpcCall(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)) {
    return &rpcCallVoid<Handler, functionName, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8>;
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
struct MakeFunctionPointerVoid9 {
    typedef void (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&, Arg8 const&);
};

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid9<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8>::type getRpcSerializedCall(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)) {
    return &rpcSerializedCallVoid<functionName, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8>;
}

template <typename Function, Function func, class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)))(
        Handler& handler) {
    return &rpcExecute<Handler, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, func>;
}

template <typename Function, Function func, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, func>;
}

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
Return rpcCall(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7, Arg8 const& arg8, Arg9 const& arg9) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));
    assert(handler.argument(arg3));
    assert(handler.argument(arg4));
    assert(handler.argument(arg5));
    assert(handler.argument(arg6));
    assert(handler.argument(arg7));
    assert(handler.argument(arg8));
    assert(handler.argument(arg9));

    assert(handler.invoke());

    Return result;
    assert(handler.end(result));
    return result;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7, Arg8 const& arg8, Arg9 const& arg9) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, true, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));
    assert(reflectSerialize(arg6, writer));
    assert(reflectSerialize(arg7, writer));
    assert(reflectSerialize(arg8, writer));
    assert(reflectSerialize(arg9, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9, Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;
    typename std::remove_cv<typename std::remove_reference<Arg8>::type>::type arg8;
    typename std::remove_cv<typename std::remove_reference<Arg9>::type>::type arg9;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;
    if (!handler.getArgument(arg3)) return false;
    if (!handler.getArgument(arg4)) return false;
    if (!handler.getArgument(arg5)) return false;
    if (!handler.getArgument(arg6)) return false;
    if (!handler.getArgument(arg7)) return false;
    if (!handler.getArgument(arg8)) return false;
    if (!handler.getArgument(arg9)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

    if (!handler.end(result)) return false;

    return true;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9, Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;
    typename std::remove_cv<typename std::remove_reference<Arg8>::type>::type arg8;
    typename std::remove_cv<typename std::remove_reference<Arg9>::type>::type arg9;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;
    if (!reflectDeserialize(arg6, reader)) return false;
    if (!reflectDeserialize(arg7, reader)) return false;
    if (!reflectDeserialize(arg8, reader)) return false;
    if (!reflectDeserialize(arg9, reader)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
struct MakeFunctionPointer2_10 {
    typedef Return (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&, Arg8 const&, Arg9 const&);
};

template <class Handler, const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer2_10<Handler, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9>::type getRpcCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)) {
    return &rpcCall<Handler, functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
struct MakeFunctionPointer10 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&, Arg8 const&, Arg9 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer10<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9>;
}

template <typename Function, Function func, class Handler, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)))(
        Handler& handler) {
    return &rpcExecute<Handler, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, func>;
}

template <typename Function, Function func, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, func>;
}

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
void rpcCallVoid(
        Handler& handler, Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7, Arg8 const& arg8, Arg9 const& arg9) {

    assert(handler.begin(functionName));

    assert(handler.argument(arg0));
    assert(handler.argument(arg1));
    assert(handler.argument(arg2));
    assert(handler.argument(arg3));
    assert(handler.argument(arg4));
    assert(handler.argument(arg5));
    assert(handler.argument(arg6));
    assert(handler.argument(arg7));
    assert(handler.argument(arg8));
    assert(handler.argument(arg9));

    assert(handler.invoke());

    assert(handler.end());
}

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
void rpcSerializedCallVoid(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7, Arg8 const& arg8, Arg9 const& arg9) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, false, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));
    assert(reflectSerialize(arg6, writer));
    assert(reflectSerialize(arg7, writer));
    assert(reflectSerialize(arg8, writer));
    assert(reflectSerialize(arg9, writer));

    assert(invokeRPC());

    endRPC();
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9, void (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)>
bool rpcExecute(Handler& handler) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;
    typename std::remove_cv<typename std::remove_reference<Arg8>::type>::type arg8;
    typename std::remove_cv<typename std::remove_reference<Arg9>::type>::type arg9;

    assert(handler.begin());

    if (!handler.getArgument(arg0)) return false;
    if (!handler.getArgument(arg1)) return false;
    if (!handler.getArgument(arg2)) return false;
    if (!handler.getArgument(arg3)) return false;
    if (!handler.getArgument(arg4)) return false;
    if (!handler.getArgument(arg5)) return false;
    if (!handler.getArgument(arg6)) return false;
    if (!handler.getArgument(arg7)) return false;
    if (!handler.getArgument(arg8)) return false;
    if (!handler.getArgument(arg9)) return false;

    function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

    if (!handler.end()) return false;

    return true;
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9, void (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)>
bool rpcSerializedExecute(IErrorHandler* err, IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;
    typename std::remove_cv<typename std::remove_reference<Arg8>::type>::type arg8;
    typename std::remove_cv<typename std::remove_reference<Arg9>::type>::type arg9;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;
    if (!reflectDeserialize(arg6, reader)) return false;
    if (!reflectDeserialize(arg7, reader)) return false;
    if (!reflectDeserialize(arg8, reader)) return false;
    if (!reflectDeserialize(arg9, reader)) return false;

    function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

    return true;
}

template <class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
struct MakeFunctionPointerVoid2_10 {
    typedef void (*type)(Handler&, Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&, Arg8 const&, Arg9 const&);
};

template <class Handler, const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid2_10<Handler, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9>::type getRpcCall(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)) {
    return &rpcCallVoid<Handler, functionName, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9>;
}

template <typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
struct MakeFunctionPointerVoid10 {
    typedef void (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&, Arg8 const&, Arg9 const&);
};

template <const char* functionName, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointerVoid10<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9>::type getRpcSerializedCall(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)) {
    return &rpcSerializedCallVoid<functionName, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9>;
}

template <typename Function, Function func, class Handler, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
RPC_CONSTEXPR_FUNC bool (*getRpcExecute(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)))(
        Handler& handler) {
    return &rpcExecute<Handler, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, func>;
}

template <typename Function, Function func, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
RPC_CONSTEXPR_FUNC bool (*getRpcSerializedExecute(void (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)))(
        IErrorHandler* err, IReader* reader, IWriter* writer) {
    return &rpcSerializedExecute<Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, func>;
}

}
