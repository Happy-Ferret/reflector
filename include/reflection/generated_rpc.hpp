#pragma once

// Generated by gen_rpc_header.py

#include "function.hpp"

namespace rpc {

template <const char* functionName, typename Return>
Return rpcSerializedCall(
        ) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, writer, reader));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <typename Return>
struct MakeFunctionPointer0 {
    typedef Return (*type)();
};

template <const char* functionName, typename Return>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer0<Return>::type getRpcSerializedCall(Return (*functionNull)()) {
    return &rpcSerializedCall<functionName, Return>;
}

template <typename Return>
bool rpcSerializedExecute(Return (*function)(), IReader* reader, IWriter* writer) {
    const Return result = function();

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <const char* functionName, typename Return, typename Arg0>
Return rpcSerializedCall(
        Arg0 const& arg0) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, writer, reader));

    assert(reflectSerialize(arg0, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <typename Return, typename Arg0>
struct MakeFunctionPointer1 {
    typedef Return (*type)(Arg0 const&);
};

template <const char* functionName, typename Return, typename Arg0>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer1<Return, Arg0>::type getRpcSerializedCall(Return (*functionNull)(Arg0)) {
    return &rpcSerializedCall<functionName, Return, Arg0>;
}

template <typename Return, typename Arg0>
bool rpcSerializedExecute(Return (*function)(Arg0), IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;

    if (!reflectDeserialize(arg0, reader)) return false;

    const Return result = function(arg0);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <typename Return, typename Arg0, typename Arg1>
struct MakeFunctionPointer2 {
    typedef Return (*type)(Arg0 const&, Arg1 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer2<Return, Arg0, Arg1>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1>;
}

template <typename Return, typename Arg0, typename Arg1>
bool rpcSerializedExecute(Return (*function)(Arg0, Arg1), IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;

    const Return result = function(arg0, arg1);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2>
struct MakeFunctionPointer3 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer3<Return, Arg0, Arg1, Arg2>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2>
bool rpcSerializedExecute(Return (*function)(Arg0, Arg1, Arg2), IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;

    const Return result = function(arg0, arg1, arg2);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
struct MakeFunctionPointer4 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer4<Return, Arg0, Arg1, Arg2, Arg3>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2, Arg3>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3>
bool rpcSerializedExecute(Return (*function)(Arg0, Arg1, Arg2, Arg3), IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;

    const Return result = function(arg0, arg1, arg2, arg3);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
struct MakeFunctionPointer5 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer5<Return, Arg0, Arg1, Arg2, Arg3, Arg4>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
bool rpcSerializedExecute(Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4), IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
struct MakeFunctionPointer6 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer6<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
bool rpcSerializedExecute(Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5), IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));
    assert(reflectSerialize(arg6, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
struct MakeFunctionPointer7 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer7<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
bool rpcSerializedExecute(Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6), IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;
    if (!reflectDeserialize(arg6, reader)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));
    assert(reflectSerialize(arg6, writer));
    assert(reflectSerialize(arg7, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
struct MakeFunctionPointer8 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer8<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
bool rpcSerializedExecute(Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7), IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;
    if (!reflectDeserialize(arg6, reader)) return false;
    if (!reflectDeserialize(arg7, reader)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7, Arg8 const& arg8) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));
    assert(reflectSerialize(arg6, writer));
    assert(reflectSerialize(arg7, writer));
    assert(reflectSerialize(arg8, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
struct MakeFunctionPointer9 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&, Arg8 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer9<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
bool rpcSerializedExecute(Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8), IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;
    typename std::remove_cv<typename std::remove_reference<Arg8>::type>::type arg8;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;
    if (!reflectDeserialize(arg6, reader)) return false;
    if (!reflectDeserialize(arg7, reader)) return false;
    if (!reflectDeserialize(arg8, reader)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
Return rpcSerializedCall(
        Arg0 const& arg0, Arg1 const& arg1, Arg2 const& arg2, Arg3 const& arg3, Arg4 const& arg4, Arg5 const& arg5, Arg6 const& arg6, Arg7 const& arg7, Arg8 const& arg8, Arg9 const& arg9) {
    IWriter* writer;
    IReader* reader;

    assert(beginRPC(functionName, writer, reader));

    assert(reflectSerialize(arg0, writer));
    assert(reflectSerialize(arg1, writer));
    assert(reflectSerialize(arg2, writer));
    assert(reflectSerialize(arg3, writer));
    assert(reflectSerialize(arg4, writer));
    assert(reflectSerialize(arg5, writer));
    assert(reflectSerialize(arg6, writer));
    assert(reflectSerialize(arg7, writer));
    assert(reflectSerialize(arg8, writer));
    assert(reflectSerialize(arg9, writer));

    assert(invokeRPC());

    Return result;
    assert(reflectDeserialize(result, reader));

    endRPC();
    return result;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
struct MakeFunctionPointer10 {
    typedef Return (*type)(Arg0 const&, Arg1 const&, Arg2 const&, Arg3 const&, Arg4 const&, Arg5 const&, Arg6 const&, Arg7 const&, Arg8 const&, Arg9 const&);
};

template <const char* functionName, typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
RPC_CONSTEXPR_FUNC typename MakeFunctionPointer10<Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9>::type getRpcSerializedCall(Return (*functionNull)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9)) {
    return &rpcSerializedCall<functionName, Return, Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9>;
}

template <typename Return, typename Arg0, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
bool rpcSerializedExecute(Return (*function)(Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9), IReader* reader, IWriter* writer) {
    typename std::remove_cv<typename std::remove_reference<Arg0>::type>::type arg0;
    typename std::remove_cv<typename std::remove_reference<Arg1>::type>::type arg1;
    typename std::remove_cv<typename std::remove_reference<Arg2>::type>::type arg2;
    typename std::remove_cv<typename std::remove_reference<Arg3>::type>::type arg3;
    typename std::remove_cv<typename std::remove_reference<Arg4>::type>::type arg4;
    typename std::remove_cv<typename std::remove_reference<Arg5>::type>::type arg5;
    typename std::remove_cv<typename std::remove_reference<Arg6>::type>::type arg6;
    typename std::remove_cv<typename std::remove_reference<Arg7>::type>::type arg7;
    typename std::remove_cv<typename std::remove_reference<Arg8>::type>::type arg8;
    typename std::remove_cv<typename std::remove_reference<Arg9>::type>::type arg9;

    if (!reflectDeserialize(arg0, reader)) return false;
    if (!reflectDeserialize(arg1, reader)) return false;
    if (!reflectDeserialize(arg2, reader)) return false;
    if (!reflectDeserialize(arg3, reader)) return false;
    if (!reflectDeserialize(arg4, reader)) return false;
    if (!reflectDeserialize(arg5, reader)) return false;
    if (!reflectDeserialize(arg6, reader)) return false;
    if (!reflectDeserialize(arg7, reader)) return false;
    if (!reflectDeserialize(arg8, reader)) return false;
    if (!reflectDeserialize(arg9, reader)) return false;

    const Return result = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

    if (!reflectSerialize(result, writer)) return false;

    return true;
}

}
