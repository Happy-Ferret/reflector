/*
    Boost Software License - Version 1.0 - August 17, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

#ifndef REFLECTOR_HAVE_SERIALIZATION_MANAGER
#define REFLECTOR_HAVE_SERIALIZATION_MANAGER

#include "serializer.hpp"

namespace serialization {
// for hooks:
// return -1 for unhandled (use default Serializer)
// return 0 for failed to handle
// return 1 for handled successfully

// it is possible to override for all types using a template with a stronger match (REFL_MATCH_0)

template <class T>
int preSerializationHook(IErrorHandler* err, IWriter* writer, const T& value, REFL_MATCH_1) {
    return -1;
}

template <class T>
int postSerializationHook(IErrorHandler* err, IWriter* writer, const T& value, int serializationResult, REFL_MATCH_1) {
    return -1;
}

template <class Fields>
int preInstanceSerializationHook(IErrorHandler* err, IWriter* writer, const char* className,
        const Fields& fields, REFL_MATCH_1) {
    return -1;
}

template <class Fields>
int postInstanceSerializationHook(IErrorHandler* err, IWriter* writer, const char* className,
        const Fields& fields, int serializationResult, REFL_MATCH_1) {
    return -1;
}

template <class T>
int preDeserializationHook(IErrorHandler* err, IReader* reader, T& value_out, REFL_MATCH_1) {
    return -1;
}

template <class T>
int postDeserializationHook(IErrorHandler* err, IReader* reader, T& value_out, int deserializationResult, REFL_MATCH_1) {
    return -1;
}

template <class Fields>
int preInstanceDeserializationHook(IErrorHandler* err, IReader* reader, const char* className,
        Fields& fields, REFL_MATCH_1) {
    return -1;
}

template <class Fields>
int postInstanceDeserializationHook(IErrorHandler* err, IReader* reader, const char* className,
        Fields& fields, int deserializationResult, REFL_MATCH_1) {
    return -1;
}

template <class T>
class SerializationManager {
public:
    static bool serialize(IErrorHandler* err, IWriter* writer, T const& value) {
        int hrc = preSerializationHook(err, writer, value, REFL_MATCH);

        if (hrc >= 0)
            return hrc ? 1 : 0;

        int rc = Serializer<T>::serialize(err, writer, value);

        hrc = postSerializationHook(err, writer, value, rc, REFL_MATCH);

        if (hrc >= 0)
            return hrc ? 1 : 0;

        return rc != 0;
    }

    static bool deserialize(IErrorHandler* err, IReader* reader, T& value_out) {
        int hrc = preDeserializationHook(err, reader, value_out, REFL_MATCH);

        if (hrc >= 0)
            return hrc ? 1 : 0;

        int rc = Serializer<T>::deserialize(err, reader, value_out);

        hrc = postDeserializationHook(err, reader, value_out, rc, REFL_MATCH);

        if (hrc >= 0)
            return hrc ? 1 : 0;

        return rc != 0;
    }

    static bool serializeTypeInformation(IErrorHandler* err, IWriter* writer, T const& value) {
        return writeTag(err, writer, Serializer<T>::TAG);
    }

    static bool verifyTypeInformation(IErrorHandler* err, IReader* reader, T& value_out) {
        return checkTag(err, reader, Serializer<T>::TAG);
    }

    template <typename Fields>
    static bool serializeInstance(IErrorHandler* err, IWriter* writer,
            const char* className, const Fields& fields) {
        int hrc = preInstanceSerializationHook(err, writer, className, fields, REFL_MATCH);

        if (hrc >= 0)
            return (bool) hrc;

        int rc = InstanceSerializer<T>::serializeInstance(err, writer, className, fields);

        hrc = postInstanceSerializationHook(err, writer, className, fields, rc, REFL_MATCH);

        if (hrc >= 0)
            return (bool) hrc;

        return rc != 0;
    }

    template <typename Fields>
    static bool deserializeInstance(IErrorHandler* err, IReader* reader,
            const char* className, const Fields& fields) {
        int hrc = preInstanceDeserializationHook(err, reader, className, fields, REFL_MATCH);

        if (hrc >= 0)
            return (bool) hrc;

        int rc = InstanceSerializer<T>::deserializeInstance(err, reader, className, fields);

        hrc = postInstanceDeserializationHook(err, reader, className, fields, rc, REFL_MATCH);

        if (hrc >= 0)
            return (bool) hrc;

        return rc != 0;
    }

    static bool serializeInstanceTypeInformation(IErrorHandler* err, IWriter* writer) {
        return writeTag(err, writer, TAG_CLASS) && Serializer<BufString_t>::serialize(err, writer,
                T::reflection_s_classId(REFL_MATCH));
    }

    static bool serializeInstanceTypeInformation(IErrorHandler* err, IWriter* writer, T const& value) {
        return writeTag(err, writer, TAG_CLASS) && Serializer<BufString_t>::serialize(err, writer,
                value.reflection_classId(REFL_MATCH));
    }

    static bool verifyInstanceTypeInformation(IErrorHandler* err, IReader* reader, T& value_out) {
        return checkTag(err, reader, TAG_CLASS);
    }
};
}

#endif
