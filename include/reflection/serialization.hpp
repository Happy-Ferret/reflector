/*
    Boost Software License - Version 1.0 - August 17, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

#pragma once

#include "base.hpp"
#include "bufstring.hpp"

namespace reflection {  // UUID('c3549467-1615-4087-9829-176a2dc44b76')
enum {
    TAG_NO_TYPE         = 0x00,

    TAG_VOID            = 0x01,
    TAG_BOOL            = 0x02,
    TAG_UTF8Z           = 0x03,
    TAG_CLASS           = 0x04,
    TAG_CLASS_SCHEMA    = 0x05,

    TAG_UINT8           = 0x10,
    TAG_INT8            = 0x11,
    TAG_UINT16          = 0x12,
    TAG_INT16           = 0x13,
    TAG_UINT32          = 0x14,
    TAG_INT32           = 0x15,
    TAG_UINT64          = 0x16,
    TAG_INT64           = 0x17,
};

template <typename T>
class Serializer {
};

inline bool checkTag(IErrorHandler* err, IReader* reader, Tag_t expected) {
    /*Tag_t tag;

    if (!reader->read(err, &tag, sizeof(tag)))
        return false;

    if (tag != expected)
        return err->errorf("IncorrectType", "Unexpected tag 0x%02X, expected 0x%02X.", tag, expected),
                false;*/

    return true;
}

inline bool writeTag(IErrorHandler* err, IWriter* writer, Tag_t tag) {
    //return writer->write(err, &tag, sizeof(tag));
    return true;
}

template <>
class Serializer<bool> {
public:
    enum { TAG = TAG_BOOL };

    static bool serialize(IErrorHandler* err, IWriter* writer, const bool& value) {
        uint8_t normalizedValue = value ? 0x01 : 0x00;
        return writeTag(err, writer, TAG) && writer->write(err, &normalizedValue, 1);
    }

    static bool deserialize(IErrorHandler* err, IReader* reader, bool& value_out) {
        if (!checkTag(err, reader, TAG))
            return false;

        uint8_t value;

        if (!reader->read(err, &value, 1))
            return false;

        value_out = (value != 0);
        return true;
    }
};

template <typename T, size_t expectedSize, Tag_t tag_>
class IntegralSerializer {
    static_assert(sizeof(T) == expectedSize, "Value size doesn't match.");

public:
    enum { TAG = tag_ };

    static bool serialize(IErrorHandler* err, IWriter* writer, const T& value) {
        return writeTag(err, writer, TAG) && writer->write(err, &value, sizeof(T));
    }

    static bool deserialize(IErrorHandler* err, IReader* reader, T& value_out) {
        if (!checkTag(err, reader, TAG))
            return false;

        if (!reader->read(err, &value_out, sizeof(T)))
            return false;

        return true;
    }
};

template <> class Serializer<uint8_t> :     public IntegralSerializer<uint8_t,  1, TAG_UINT8> {};
template <> class Serializer<int8_t> :      public IntegralSerializer<int8_t,   1, TAG_INT8> {};
template <> class Serializer<uint16_t> :    public IntegralSerializer<uint16_t, 2, TAG_UINT16> {};
template <> class Serializer<int16_t> :     public IntegralSerializer<int16_t,  2, TAG_INT16> {};
template <> class Serializer<uint32_t> :    public IntegralSerializer<uint32_t, 4, TAG_UINT32> {};
template <> class Serializer<int32_t> :     public IntegralSerializer<int32_t,  4, TAG_INT32> {};
template <> class Serializer<uint64_t> :    public IntegralSerializer<uint64_t, 8, TAG_UINT64> {};
template <> class Serializer<int64_t> :     public IntegralSerializer<int64_t,  8, TAG_INT64> {};

template <>
class Serializer<BufString_t> {
public:
    enum { TAG = TAG_UTF8Z };

    static bool serialize(IErrorHandler* err, IWriter* writer, const BufString_t& value) {
        return writeTag(err, writer, TAG) && writer->write(err, value.buf, strlen(value.buf) + 1);
    }

    static bool deserialize(IErrorHandler* err, IReader* reader, BufString_t& value_out) {
        if (!checkTag(err, reader, TAG))
            return false;

        size_t len = 0;

        char next;

        do {
            if (!reader->read(err, &next, sizeof(next)))
                return false;

            if (next == 0)
                break;
            else {
                ensureSize(err, value_out.buf, value_out.bufSize, len + 1);
                value_out.buf[len++] = next;
            }
        }
        while (true);

        ensureSize(err, value_out.buf, value_out.bufSize, len + 1);
        value_out.buf[len] = 0;
        return true;
    }
};

template <class C>
class InstanceSerializer {
public:
    enum { TAG = TAG_CLASS };

    template <typename Fields>
    static bool serializeInstance(IErrorHandler* err, IWriter* writer,
            const char* className, Fields& fields) {
        if (!writeTag(err, writer, TAG))
            return false;

        BufString_t cn;
        bufStringSet(err, cn.buf, cn.bufSize, className, strlen(className));

        uint32_t numFields = fields;

        if (!Serializer<BufString_t>::serialize(err, writer, cn)
                || !Serializer<uint32_t>::serialize(err, writer, numFields))
            return false;

        for (size_t i = 0; i < fields; i++) {
            const auto& field = fields[i];

            if (!field.refl->serialize(err, writer, field))
                return false;
        }

        return true;
    }

    template <typename Fields>
    static bool serializeSchema(IErrorHandler* err, IWriter* writer,
            const char* className, Fields& fields) {
        if (!writeTag(err, writer, TAG_CLASS_SCHEMA))
            return false;

        BufString_t cn, str;
        //bufStringSet(err, cn.buf, cn.bufSize, className, strlen(className));

        uint32_t numFields = fields;

        if (/*!Serializer<BufString_t>::serialize(err, writer, cn)
                || */!Serializer<uint32_t>::serialize(err, writer, numFields))
            return false;

        for (size_t i = 0; i < fields; i++) {
            const auto& field = fields[i];

            const char* name = field.name;
            className = field.className;
            Tag_t tag = field.refl->getTag();

            bufStringSet(err, cn.buf, cn.bufSize, className, strlen(className));
            bufStringSet(err, str.buf, str.bufSize, name, strlen(name));

            if (!Serializer<BufString_t>::serialize(err, writer, cn)
                    || !Serializer<BufString_t>::serialize(err, writer, str)
                    || !writer->write(err, &tag, sizeof(tag)))
                return false;

            if (tag == TAG_CLASS) {
                className = field.staticTypeName();

                bufStringSet(err, cn.buf, cn.bufSize, className, strlen(className));

                if (!Serializer<BufString_t>::serialize(err, writer, cn))
                    return false;
            }
        }

        return true;
    }
};
}
