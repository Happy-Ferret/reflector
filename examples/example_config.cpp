/*
    Boost Software License - Version 1.0 - August 17, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

#include <reflection/api.hpp>
#include <reflection/magic.hpp>

#include <reflection/basic_types.hpp>
#include <reflection/class.hpp>

#include <reflection/config.hpp>

#include <cassert>
#include <map>

using namespace std;

// engine

class MyConfigManager: public reflection::IConfigManager {
public:
    MyConfigManager() {
        config["NetworkConnection.maxDownloadRate"] = "500000";

        config["Torrent.enableDHT"] = "1";
        config["Torrent.port"] = "1337";
    }

    virtual bool getValueForKey(reflection::IErrorHandler* err, const char* className, const char* fieldName, const char*& value_out) override {
        string key = string(className) + "." + fieldName;
        auto entry = config.find(key);

        if (entry != config.end()) {
            tmp = entry->second;
            value_out = tmp.c_str();
            return true;
        }
        else {
            value_out = nullptr;
            return true;
        }
    }

    map<string, string> config;
    string tmp;
};

// client

class NetworkConnection {
public:
    NetworkConnection() {
        maxDownloadRate = -1;
        maxUploadRate = -1;
    }

    REFL_BEGIN("NetworkConnection", 1)
        REFL_CONFIG(maxDownloadRate)
        REFL_CONFIG(maxUploadRate)
    REFL_END

protected:
    int maxDownloadRate, maxUploadRate;
};

class Torrent : public NetworkConnection {
public:
    Torrent() {
        enableDHT = false;
        port = -1;

        // load configuration
        assert(reflection::configure(*this));

        // just make up some values here
        fileName = "HelloWorld.torrent";
        fileSizeInBytes = 90000;
        downloadedBytes = 20000;
    }

    REFL_BEGIN_EXTENDS("Torrent", 1, NetworkConnection)
        REFL_MUST_CONFIG(enableDHT)
        REFL_MUST_CONFIG(port)

        REFL_FIELD(fileName)
        REFL_FIELD(fileSizeInBytes)
        REFL_FIELD(downloadedBytes)
    REFL_END

protected:
    // configuration
    bool enableDHT;
    int port;

    // state
    string fileName;
    int fileSizeInBytes, downloadedBytes;
};

namespace reflection {
IConfigManager* cfgMgr;
}

int main(int argc, char** argv) {
    MyConfigManager config;
    reflection::cfgMgr = &config;

    Torrent torrent;    // auto-configures itself

    // will print state as well as configuration
    reflection::reflectPrint(torrent);

    // only includes the state by default - not configuration options
    string asString = reflection::reflectToString(torrent);
    puts(asString.c_str());
}

/* OUTPUT:

Instance of class Torrent:
bool            Torrent::enableDHT = true
int32_t         Torrent::port = 1337
std::string     Torrent::fileName = HelloWorld.torrent
int32_t         Torrent::fileSizeInBytes = 90000
int32_t         Torrent::downloadedBytes = 20000
int32_t         NetworkConnection::maxDownloadRate = 500000
int32_t         NetworkConnection::maxUploadRate = -1

{fileName="HelloWorld.torrent", fileSizeInBytes="900000", downloadedBytes="200000"}

*/
