/*
    Boost Software License - Version 1.0 - August 17, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

// we only use these for UUID in this example
#include <reflection/api.hpp>
#include <reflection/magic.hpp>

#include <reflection/basic_types.hpp>

#include <cassert>
#include <vector>

using namespace std;
using reflection::UUID_t;
using reflection::uuidOfClass;

// library code

typedef int GLint;

void glGenTexture(GLint* texId, uint8_t* pixelData) {
    // ...
    *texId = 1;
}

void glBindTexture(GLint texId) {
    // ...
}

void glDeleteTexture(GLint texId) {
    // ...
}

void glGenBuffer(GLint* bufferId, uint8_t* pixelData) {
    // ...
    *bufferId = 1;
}

void glDeleteBuffer(GLint bufferId) {
    // ...
}

// definitions

class IResource;

class IResourceManager {
public:
    virtual void* getResource(const char* recipe, const UUID_t& classUuid) = 0;

    template <class C> C* getResource(const char* recipe) { return reinterpret_cast<C*>(getResource(recipe, uuidOfClass<C>())); }
    template <class C> void resource(C** res_out, const char* recipe) { *res_out = getResource<C>(recipe); }
};

class IResource {
public:
    REFL_UUID(0x2103915a, 0x22834b68, 0x87532dae, 0x6fb8f091)
    enum State_t { CREATED, BOUND, PRELOADED, REALIZED, RELEASED };

    virtual ~IResource() {}

    virtual void* cast(const UUID_t& classUuid) = 0;
    virtual const char* getRecipe() const = 0;
    virtual State_t getState() const = 0;
    virtual void stateTransitionTo(State_t targetState, IResourceManager* resMgr) = 0;
};

class ITexture {
    REFL_UUID(0x84a32108, 0x60a147c1, 0x8329fea6, 0xa2021c48)
};

class IModel {
    REFL_UUID(0xf1cf112f, 0xd30a422f, 0x95363c3e, 0x7aa48376)
};

// renderer

class Texture: public ITexture, public IResource {
public:
    REFL_UUID(0xbcabd424, 0x223047bd, 0xb50333eb, 0x06f7af49)

    Texture(string fileName)
            : state(CREATED), fileName(fileName) {
        pixelData = nullptr;
        texId = 0;
    }

    virtual void* cast(const UUID_t& classUuid) override {
        if (classUuid == uuidOfClass<ITexture>())
            return static_cast<ITexture*>(this);
        else if (classUuid == uuidOfClass<Texture>())
            return this;
        else
            return nullptr;
    }

    virtual const char* getRecipe() const override { return fileName.c_str(); }
    virtual State_t getState() const override { return state; }

    virtual void stateTransitionTo(State_t targetState, IResourceManager* resMgr) override {
        if (state == targetState)
            return;

        if (targetState == BOUND) {
            unload();
            unrealize();
        }
        else if (targetState == PRELOADED) {
            preload();
            unrealize();
        }
        else if (targetState == REALIZED) {
            preload();
            realize();
        }
        else if (targetState == RELEASED) {
            unload();
            unrealize();
        }

        state = targetState;
    }

    void preload() {
        if (pixelData == nullptr)
            pixelData = (uint8_t*) malloc(1000 * 1000);
    }

    void unload() {
        if (pixelData != nullptr) {
            free(pixelData);
            pixelData = nullptr;
        }
    }

    void realize() {
        if (texId == 0) {
            glGenTexture(&texId, pixelData);
            free(pixelData);
            pixelData = nullptr;
        }
    }

    void unrealize() {
        if (texId != 0) {
            glDeleteTexture(texId);
            texId = 0;
        }
    }

private:
    State_t state;
    string fileName;

    uint8_t* pixelData;

    GLint texId;

    friend class Model;
};

class Model: public IModel, public IResource {
public:
    REFL_UUID(0x9917f0b4, 0x44c743ba, 0xbb30f6e3, 0x107872df)

    Model(string fileName)
            : state(CREATED), fileName(fileName) {
        dependenciesBound = false;

        vertexData = nullptr;
        bufferId = 0;
    }

    virtual void* cast(const UUID_t& classUuid) override {
        if (classUuid == uuidOfClass<IModel>())
            return static_cast<IModel*>(this);
        else if (classUuid == uuidOfClass<Model>())
            return this;
        else
            return nullptr;
    }

    virtual const char* getRecipe() const override { return fileName.c_str(); }
    virtual State_t getState() const override { return state; }

    virtual void stateTransitionTo(State_t targetState, IResourceManager* resMgr) override {
        if (state == targetState)
            return;

        if (targetState == BOUND) {
            bindDependencies(resMgr);
            unload();
            unrealize();
        }
        else if (targetState == PRELOADED) {
            bindDependencies(resMgr);
            preload();
            unrealize();
        }
        else if (targetState == REALIZED) {
            bindDependencies(resMgr);
            preload();
            realize();

            for (auto texture : textures) {
                if (texture->getState() != REALIZED)
                    printf(" -> %-35s realize NOW\n", texture->getRecipe());

                texture->stateTransitionTo(REALIZED, resMgr);
            }
        }
        else if (targetState == RELEASED) {
            unload();
            unrealize();
        }

        state = targetState;
    }

    void bindDependencies(IResourceManager* resMgr) {
        if (!dependenciesBound) {
            textures.push_back(resMgr->getResource<Texture>((fileName + "_tex1.jpg").c_str()));
            textures.push_back(resMgr->getResource<Texture>((fileName + "_bumpmap.jpg").c_str()));
            dependenciesBound = true;
        }
    }

    void preload() {
        if (vertexData == nullptr)
            vertexData = (uint8_t*) malloc(1000 * 1000);
    }

    void unload() {
        if (vertexData != nullptr) {
            free(vertexData);
            vertexData = nullptr;
        }
    }

    void realize() {
        if (bufferId == 0) {
            glGenBuffer(&bufferId, vertexData);
            free(vertexData);
            vertexData = nullptr;

            glBindTexture(textures[0]->texId);
            glBindTexture(textures[1]->texId);
        }
    }

    void unrealize() {
        if (bufferId != 0) {
            glDeleteBuffer(bufferId);
            bufferId = 0;
        }
    }

private:
    State_t state;
    string fileName;

    bool dependenciesBound;
    vector<Texture*> textures;

    uint8_t* vertexData;

    GLint bufferId;
};

// engine

class ResourceManager : public IResourceManager {
public:
    ResourceManager() {
        targetState = IResource::CREATED;
    }

    ~ResourceManager() {
        for (auto& resource : resources)
            delete resource.res;
    }

    virtual void* getResource(const char* recipe, const UUID_t& classUuid) override {
        // look for a match among already existing resources
        for (auto& resource : resources) {
            if (resource.recipe == recipe) {
                void* ptr = resource.res->cast(classUuid);

                if (ptr != nullptr)
                    return ptr;
            }
        }

        // no match found; need to create a new instance
        IResource* res = createResource(recipe, classUuid);
        assert(res);

        // make sure the resource is in the correct state
        // eg. if we're already rendering, the resource needs to be realized
        resourceMakeCorrectState(res);

        return res;
    }

    void preloadResources() {
        // make sure all resources are at least preloaded

        targetState = IResource::PRELOADED;
        allResourcesMakeCorrectState();
    }

    void realizeResources() {
        // make sure all resources are ready for rendering

        targetState = IResource::REALIZED;
        allResourcesMakeCorrectState();
    }

    void releaseResources() {
        // free all resources

        targetState = IResource::RELEASED;
        allResourcesMakeCorrectState();
    }

private:
    IResource* createResource(const char* recipe, const UUID_t& classUuid) {
        // would be distributed among the renderer, audio backend etc.
        // each providing their relevant resource classes

        if (classUuid == reflection::uuidOfClass<ITexture>()
                || classUuid == reflection::uuidOfClass<Texture>()) {
            auto tex = new Texture(recipe);

            Resource_t resource = { recipe, tex };
            resources.push_back(resource);

            return tex;
        }
        else if (classUuid == reflection::uuidOfClass<IModel>()
                || classUuid == reflection::uuidOfClass<Model>()) {
            auto mdl = new Model(recipe);

            Resource_t resource = { recipe, mdl };
            resources.push_back(resource);

            return mdl;
        }
        else
            return nullptr;
    }

    void allResourcesMakeCorrectState() {
        for (auto& resource : resources) {
            IResource* res = resource.res;
            resourceMakeCorrectState(res);
        }
    }

    void resourceMakeCorrectState(IResource* res) {
        if (res->getState() != targetState) {
            printf("%-39s ", res->getRecipe());

            switch (targetState) {
                case IResource::BOUND:      printf("bindDependencies (single thread)"); break;
                case IResource::PRELOADED:  printf("preload (multi-threaded)"); break;
                case IResource::REALIZED:   printf("realize (rendering thread)"); break;
                case IResource::RELEASED:   printf("release"); break;
            }

            printf("\n");
        }

        res->stateTransitionTo(targetState, this);
    }

    struct Resource_t {
        string recipe;
        IResource* res;
    };

    IResource::State_t targetState;

    vector<Resource_t> resources;
};

// client

IResourceManager* g_resMgr;

class Tree {
public:
    Tree() {
        g_resMgr->resource(&mdl, "tree.mdl");
    }

private:
    IModel* mdl;
};

class Player {
public:
    Player() {
        char modelName[40];
        sprintf(modelName, "player_model_%d.mdl", rand() % 100);

        g_resMgr->resource(&mdl, modelName);
    }

private:
    IModel* mdl;
};

int main(int argc, char** argv) {
    ResourceManager resMgr;
    g_resMgr = &resMgr;

    printf("##\tLoading...\n");

    Tree tree;

    // load resources from disk and decode
    // this can be parallelized very efficiently
    resMgr.preloadResources();

    // bind all resources in the renderer (glTexImage2D etc.)
    resMgr.realizeResources();

    printf("##\tGame started.\n");
    printf("##\tA new player connected!\n");
    Player player;

    printf("##\tGame over.\n");
    resMgr.releaseResources();
}

/* OUTPUT:

##      Loading...
tree.mdl                                preload (multi-threaded)
tree.mdl_tex1.jpg                       preload (multi-threaded)
tree.mdl_bumpmap.jpg                    preload (multi-threaded)
tree.mdl                                realize (rendering thread)
 -> tree.mdl_tex1.jpg                   realize NOW
 -> tree.mdl_bumpmap.jpg                realize NOW
##      Game started.
##      A new player connected!
player_model_41.mdl                     realize (rendering thread)
player_model_41.mdl_tex1.jpg            realize (rendering thread)
player_model_41.mdl_bumpmap.jpg         realize (rendering thread)
##      Game over.
tree.mdl                                release
tree.mdl_tex1.jpg                       release
tree.mdl_bumpmap.jpg                    release
player_model_41.mdl                     release
player_model_41.mdl_tex1.jpg            release
player_model_41.mdl_bumpmap.jpg         release

*/
